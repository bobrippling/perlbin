#!/usr/bin/perl
use warnings;

use constant
{
	INDENT => "\t"
};

$argv0 = $0;
@exclude = ();
@include = ();
$depth_lim = -1;

sub inset
{
	my $f = shift;
	return grep { $f =~ /$_/ } @_;
}

sub link_exists($$)
{
	my ($path, $target) = @_;

	if(substr($target, 0, 1) eq '/'){
		return (-f $target) ? 1 : 0;
	}else{
		my $dir = $path;
		$dir =~ s#/[^/]+$##;
		return (-f "$dir/$target") ? 1 : 0;
	}
}

sub show($$)
{
	sub fileinfo($)
	{
		sub modestr($)
		{
			my $mode = shift;
			$mode %= 01000;
			sprintf '%o', $mode;
		}
		sub usrgrp($$)
		{
			my $uid = shift;
			my $gid = shift;
			my $name = getpwuid $uid;
			my $grp  = getgrgid $gid;
			return ($name ? $name : $uid) . ' ' . ($grp ? $grp : $gid);
		}
		sub date($)
		{
			use POSIX qw(strftime);
			return strftime "%a %d %H:%M", localtime;
		}
		sub size($)
		{
			my $n = shift;
			if($n > 1024){
				return sprintf '%.0dKB', $n / 1024;
			}
			return $n . "B";
		}

		my @stat = stat $_[0];

		return modestr($stat[2]) . ' ' .
			usrgrp($stat[4], $stat[5]) . ' ' .
		 	size($stat[7]) . ' ' .
			date($stat[9]);
	}

	sub escape_quote($)
	{
		my $s = shift;
		s#"#\\"#g;
		$s;
	}

	my($path, $name) = @_;

	$name = $path if $opt{full};

	my %class = (
		'x' => ['*', \$col{green}   ],
		'd' => ['/', \$col{blue}    ],
		'l' => ['@', \$col{cyan}    ],
		'p' => ['|', \$col{purple}  ],
		'S' => ['=', \$col{brown}   ],
	);


	print INDENT x $indent;

	my $shown = 0;
	if($opt{classify}){
		for(keys %class){
			if(eval "-$_ \"" . escape_quote($path) . '"'){
				print ${${$class{$_}}[1]},
							$name,
							$opt{classify} ? ${$class{$_}}[0] : '',
							"\e[m";

				$shown = 1;
				last;
			}
		}
	}

	print $name unless $shown;

	if($opt{long}){
		# -rw-r--r-- rob users 1143 $date
		print "\t\e[36m", fileinfo $path, "\e[m";
	}elsif($opt{symlinks} and my $target = readlink $path){
		my $exists;
		if($opt{classify}){
			$exists = link_exists($path, $target);
		}else{
			$exists = 1;
		}

		print $col{red} unless $exists;
		print " -> $target";
		print "\e[m"    unless $exists;
	}
	print "\n";
}

sub canshow
{
	my $f = shift;

	if(@include){
		return inset($f, @include) and not inset($f, @exclude);
	}else{
		return not inset($f, @exclude);
	}
}

sub lst
{
	my $depth = shift;

	return if $depth_lim != -1 and ++$depth > $depth_lim;

	for my $dir (@_){
		opendir(my $dh, $dir) or do{ warn "$argv0: opendir: $dir: $!\n"; next; };
		my @ents = readdir $dh;
		closedir $dh;

		for($opt{sort} ? sort @ents : @ents){
			next if /^\.\.?$/;

			my $hidden = m#^\.#;
			my $file = "$dir/$_";

			if(canshow($file)){
				if(!$hidden or $opt{all}){
					show($file, $_);

					my $recurse = -d $file && $opt{recursive} && !($file =~ m#/\.\.?$#);

					if($recurse and -l $file){
						if($opt{follow_ln}){
							$recurse = 1;
						}else{
							$recurse = 0;
						}
					}

					if($recurse){
						$indent++;
						lst($depth, $file);
						$indent--;
					}
				}
			}
		}
	}
}

$indent  = 0;
$col     = -t STDOUT;

$argv0 = $1 if $argv0 =~ m#.*/([^/]+$)#;

my %ls_colours = map { split /=/ } split /:/, ($ENV{LS_COLORS} or '');
%col = (
	green   => "\e[" . ($ls_colours{ex} or "1;32") . 'm',
	blue    => "\e[" . ($ls_colours{di} or "0;34") . 'm',
	cyan    => "\e[" . ($ls_colours{ln} or "1;34") . 'm',
	purple  => "\e[" . ($ls_colours{pi} or "0;35") . 'm',
	brown   => "\e[" . ($ls_colours{so} or "0;33") . 'm',
	red     => "\e[" . (                   "0;31") . 'm',
);

%opt = (
	recursive => 1,
	full      => 0,
	all       => 0,
	classify  => 0,
	follow_ln => 0,
	long      => 0,
	symlinks  => 0,
	sort      => 0,
);

%args = (
	'-d' => [0, \$opt{recursive}],
	'-f' => [1, \$opt{full}     ],
	'-a' => [1, \$opt{all}      ],
	'-A' => [1, \$opt{all}      ], # for ls compat
	'-F' => [1, \$opt{classify} ],
	'-c' => [1, \$col           ],
	'-C' => [0, \$col           ],
	'-L' => [1, \$opt{follow_ln}],
	'-l' => [1, \$opt{long}     ],
	'-L' => [1, \$opt{symlinks} ],
	'-s' => [1, \$opt{sort}     ],
);


while(@ARGV and $ARGV[0] =~ /^-/){
	if($ARGV[0] eq '--'){
		shift @ARGV;
		last;
	}elsif(my $ref = $args{$ARGV[0]}){
		${${$ref}[1]} = ${$ref}[0];

	}elsif($ARGV[0] =~ /^-(x)(.+)$/i){
		if($1 eq 'x'){
			push @exclude, $2;
		}else{
			push @include, $2;
		}

	}elsif($ARGV[0] =~ /^-m([0-9]+)$/){
		$depth_lim = $1;

	}elsif($ARGV[0] eq '--help'){
		my $s = <<"!";
Usage: $0 [OPTS] [FILES...]
  -a: All files
  -d: Don't recurse
  -f: Show full paths
  -F: Classify with */=>@|
  -L: Follow symbolic links
  -C: No colour (-c to force colour)
  -x: Exclude files matching REGEX
  -s: Sort by name
  -m: Max depth
!
		print STDERR $s;
		exit 1;
	}else{
		last;
	}

	shift @ARGV;
}

if(!$col){
	$col{$_} = '' for keys %col;
}

$ARGV[0] = '.' unless @ARGV;

lst 0, @ARGV;
