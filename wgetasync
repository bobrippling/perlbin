#!/usr/bin/perl
use warnings;

my $MAX_CHILD = 10;
our %downloads; # Map<PID, Link>
our %downloads_rev; # reverse of above, for lookup
our %history;
our $children = 0;
my  $doneone = 0;
my  @wget_args;
our $dups = 0;
my $wget_bin = "wget";
my $dir = '.';
my $verbose = 0;

sub basename($)
{
	my $_ = shift;
	return $1 if m#/([^/]+$)#;
	return $_;
}

sub adddownload($)
{
	my $link = shift;

	return if $history{$link} or -e basename($link);

	while($children >= $MAX_CHILD){
		print STDERR "reached limit ($children), waiting...\r";
		waitone();
	}

	die "fork: $!\n" unless defined($pid = fork());

	if($pid == 0){
		my @cmd = (
			$wget_bin,
			@wget_args,
			$verbose ? '' : '-q',
			$link
		);

		chdir $dir || warn "chdir $dir: $!\n";
		print STDERR "exec: @cmd\n" if $verbose;
		exec @cmd;
		die "exec: $!\n";
	}

	$children++;
	$downloads{$pid} = $link;
	$downloads_rev{$link} = $pid;

	$history{$link} = 1 unless $dups;
}

sub waitone()
{
	$pid = wait();
	# status in $?

	if($pid == -1){
		# should never get here
		print STDERR "$col{err}wait() returned -1, still have children...?:$col{off}\n";
		print STDERR "pid: $_, link: $downloads{$_}\n" for keys %downloads;
		exit 1;
	}

	$children--;

	my $fh;
	my $col;
	if($?){
		$fh = STDERR;
		$col = $col{err};
	}else{
		$fh = STDOUT;
		$col = $col{status};
	}

	print $fh "${col}wget = $?$col{off} for $col{info}" . $downloads{$pid} . "$col{off}\n";
	#$errs{$downloads{$pid}} = $? if $?;

	delete $downloads{$pid};
}

%col = (
	status => "\e[0;32m", # green
	info   => "\e[0;34m", # blue
	err    => "\e[0;31m", # red
	off    => "\e[0;0m",
);

unless(-t STDOUT){
	$col{$_} = '' for keys %col;
}

sub usage(){
	my $u = <<"!";
Usage: $0 [OPTS] [links...]
If no links are given, they are read on stdin

-w x: Add 'x' to wget arguments
-m x: Set max-children to x
-d:   Don't filter out duplicates
-O x: Output to directory x
-v:   Verbose (show wget output)
!

	print $u;

	exit 1;
}

while(1){
	$_ = shift;
	last unless defined;

	if($_ eq '--help'){
		usage();
	}elsif($_ eq '-w'){
		push @wget_args,  shift || usage();
		next;
	}elsif($_ eq '-m'){
		$MAX_CHILD = shift || usage();
	}elsif($_ eq '-d'){
		$dups = 1;
		next;
	}elsif($_ eq '-O'){
		$dir = shift || usage();
		mkdir $dir if not -d $dir;
		next;
	}elsif($_ eq '-v'){
		$verbose = 1;
		next;
	}

	adddownload $_;
	$doneone = 1;
}

if(!$doneone){
	while(<>){
		chomp;
		adddownload $_;
	}
}

# collect downloads
waitone() while keys %downloads;

#if(keys %errs){
	# TODO: retry option?
	#print STDERR "error $col{err}$errs{$_}$col{off} for $_\n" for keys %errs;
#}
