#!/usr/bin/perl
use warnings;

use constant {
	MAX_CHILD => 150
};

our %downloads; # Map<PID, Link>
our %downloads_rev; # reverse of above, for lookup
our $children = 0;
my  $doneone = 0;

sub adddownload($)
{
	$link = $_[0];

	while($children >= MAX_CHILD){
		print STDERR "reached child limit of $children, waiting...\n";
		waitone();
	}

	die "fork: $!\n" unless defined($pid = fork());

	if($pid == 0){
		exec "wget -q '$link'";
		die "exec: $!\n";
	}

	$children++;
	$downloads{$pid} = $link;
	$downloads_rev{$link} = $pid;
}

sub waitone()
{
	$pid = wait();
	# status in $?

	if($pid == -1){
		# should never get here
		print "$col{err}wait() returned -1, still have children...?:$col{off}\n";
		print "pid: $_, link: $downloads{$_}\n" for keys %downloads;
		exit 1;
	}

	$children--;

	if($?){
		print $col{err};
	}else{
		print $col{status};
	}

	my $fh;
	if($?){
		$fh = STDERR;
	}else{
		$fh = STDOUT;
	}

	print $fh "wget = $?$col{off} for $col{info}" . $downloads{$pid} . "$col{off}\n";
	#$errs{$downloads{$pid}} = $? if $?;

	delete $downloads{$pid};
}

%col = (
	status => "\e[0;32m", # green
	info   => "\e[0;34m", # blue
	err    => "\e[0;31m", # red
	off    => "\e[0;0m",
);

unless(-t STDOUT){
	$col{$_} = '' for keys %col;
}

for(@ARGV){
	if($_ eq '--help'){
		print "Usage: $0 [links...]\n";
		print "If no links are given, they are read on stdin\n";
		exit 1;
	}

	adddownload $_;
	$doneone = 1;
}

if(!$doneone){
	while(<STDIN>){
		chomp;
		adddownload $_;
	}
}

# collect downloads
waitone() while keys %downloads;

#if(keys %errs){
	# TODO: retry option
	#print STDERR "error $col{err}$errs{$_}$col{off} for $_\n" for keys %errs;
#}
