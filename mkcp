#!/usr/bin/perl

use warnings;

sub usage
{
	print "Usage: $0 [-n] src-file(s) dest-dir\n";
	print STDERR "-n: no-op\n";
	exit 1;
}

sub basename($)
{
	my $x = $_[0];
	return $1 if $x =~ m|.*/([^/]+$)|;
	return $x;
}

sub mkdir_p($)
{
	my $d = '';
	my @d = map { $d .= "/$_" } grep { length } split m|/|o, $_[0];

	if($_[0] !~ m|^/|){
		s|^/||o for @d;
	}

	for(@d){
		if(!-d $_){
			if($debug){
				print "mkdir($_)\n";
			}else{
				mkdir $_ or die "$0: mkdir \"$_\": $!\n";
			}
		}
	}
	return 1;
}

sub echo
{
	$\ = ' ';
	print for @_;
	$\ = "\n";
	print '';
	return 1;
}

sub exec
{
	exec @_
}

$progname = basename($0);

if($progname eq 'mkcp'){
	$iscopy = 1;
}elsif($progname eq 'mkmv'){
	$iscopy = 0;
}else{
	die "Invalid program name \"$progname\", expected \"mkcp\" or \"mkmv\"\n";
}

usage if @ARGV < 2 or $ARGV[0] eq '--help';

our ($debug, $inter) = (0, 0); # cmd line opts

# use a temp array, otherwise shift damages the loop
for(my @argv = @ARGV){
	if($_ eq '-n'){
		$debug = 1;
	}elsif($_ eq '-i'){
		print STDERR "interactive\n" if $debug;
		$inter = 1;
	}elsif($_ eq '-R'){
		print STDERR "already recursive\n";
	}else{
		shift @ARGV if $_ eq '--';
		last;
	}
	shift @ARGV;
}

@files = @ARGV;
$last = pop @files;

if($iscopy){
	$cmd  = 'cp';
	@args = ('-LR');
}else{
	$cmd  = 'mv';
	@args = ();
}

push @args, "-i" if $inter;

mkdir_p($last);
($debug ? \&echo : \&exec)->($cmd, @args, @files, $last) or die "exec(): $!$/";
