#!/usr/bin/perl

use warnings;

sub usage
{
	print "Usage: $0 src-file(s) dest-dir\n";
	print "Program to mkdir then $cmd\n";
	exit 1;
}

sub quote($)
{
	return "'$_[0]'";
}

sub basename($)
{
	my $_ = $_[0];
	return $1 if m|.*/([^/]+$)|;
	return $_;
}

sub mkdir_p($)
{
	$d = '';
	@d = map { $d = "$d/$_" } grep { length } split m|/|o, $_[0];

	if($_[0] !~ m|^/|){
		s|^/||o for @d;
	}

	for(@d){
		if(!-d $_){
			if($debug){
				print "mkdir '$_'\n";
			}else{
				mkdir $_ or die "mkdir $_: $!\n";
			}
		}
	}
	return 1;
}

$progname = basename($0);

if($progname eq 'mkcp'){
	$iscopy = 1;
}elsif($progname eq 'mkmv'){
	$iscopy = 0;
}else{
	die "Invalid program name \"$progname\", expected \"mkcp\" or \"mkmv\"\n";
}

usage if(@ARGV < 2 or $ARGV[0] eq '--help');

our ($debug, $inter) = (0, 0); # cmd line opts

# use a temp array, otherwise shift damages the loop
for(@argv = @ARGV){
	if($_ eq '-d'){
		$debug = 1;
	}elsif($_ eq '-i'){
		print "interactive\n" if $debug;
		$inter = 1;
	}else{
		shift @ARGV if $_ eq '--';
		last;
	}
	shift @ARGV;
}
@argv = undef;

$last  = $ARGV[$#ARGV];
@files = map { quote($_) } @ARGV[0 .. $#ARGV-1];

$cmd  = $iscopy ? 'cp' : 'mv';
$args = $iscopy ? '-R' : '';

$args = "$args -i" if $inter;

mkdir_p($last);
if($debug){
	print "$cmd $args @files " . quote($last) . "\n";
}else{
	exec( "$cmd $args @files " . quote($last)) or die "exec(): $!$/";
}
