#!/usr/bin/perl
use warnings;

my $regex_img     = '="([^"]*\.(jpe?g|png|gif))"';
my $regex_href    = "<a [^>]*href$regex_img";
my $regex_imgsrc  = "<img [^>]*src$regex_img";
my $regex_both    = "<(a [^>]*href|img [^>]*src)$regex_img";

our $regex         = $regex_href;
our $dlcmd         = 'dlimage $$regex_subexpr while(s|$regex||i);';
our $regex_subexpr = 1;

our $currentpage = undef;

our $wget_verbose = 0;


sub usage()
{
	print <<EOD;
Usage: $0 [OPTIONS] [--] file(s)...

Where OPTIONS can be either:
  -i: Download images matching <img src="...">
  -a: Download images matching <a href="...">
  -b: Both -a and -a
  -v: show stats at the end
  -w: show wget output

-a is default

Example usage:
\$ wget -qO - http://www.path.com/to/webpage.html | $0
\$ $0 -a path/to/local_webpage.html -i path/to/another.html
\$ $0 -b http://website.com/webpage.html local_file.html
EOD
	exit 1;
}

sub basename($)
{
	my $_ = $_[0];
	return $1 if m|.*/([^/]+)$|;
	return $_;
}

sub dlimage($)
{
	$file = basename($link = $_[0]);

	if(-e $file){
		print "have $link\n" unless $verbose;
		$processed{$file} = 'already have';
		return;
	}

	if($link =~ m|^/|){
		# append link name
		if($currentpage){
			($copy = $currentpage) =~ s#(\.(co(m|\.uk)|org))/.*#$1#;

			$link = $copy . $link;

			print "warning: appending links -> $link\n";
		}else{
			print "can't wget non-absolute link: $link\n";
			return;
		}
	}

	system("wget " . ($wget_verbose ? '' : '-q') . " $link") == 0 or die "$0: `wget $link` failed";

	print "wgot $link\n" unless $verbose;
	$processed{$file} = 'downloaded';
}

sub linkmeupscotty
{
	if(defined($file = $_[0]) && !($file eq '-')){
		if(-e $file){
			open($fh,'<', $file) or die "$!\n";
			$processed{$file} = 'read & processed';
		}else{
			open($fh, "wget -qO - $file |") or die "$!\n";
			$currentpage = $file;
			$processed{$file} = 'wgot & processed';
		}

		eval $dlcmd while($_ = <$fh>);

		close $fh;
	}else{
		# no args - stdin
		eval $dlcmd while(<STDIN>);
		$processed{'-'} = 'processed';
	}
}

sub stats
{
	print "--- Done, Stats ---\n";
	print "$_: $processed{$_}\n" for keys %processed;
}

our %processed;
$verbose = 0;
$doneone = 0;
$options = 1; # true while not found "--"

for $arg(@ARGV){
	if($arg eq '--help'){
		usage;

	}elsif($arg eq '-v'){
		$verbose = 1;
		next;

	}elsif($arg eq '-i'){
		$regex_subexpr = 1;
		$regex = $regex_imgsrc;
		next;

	}elsif($arg eq '-a'){
		$regex_subexpr = 1;
		$regex = $regex_href;
		next;

	}elsif($arg eq '-b'){
		$regex_subexpr = 2;
		$regex = $regex_both;
		next;

	}elsif($arg eq '-w'){
		$wget_verbose = 1;
		next;

	}elsif($arg eq '--'){
		$options = 0;
		next;
	}

	linkmeupscotty $arg;
	$doneone = 1;
}

linkmeupscotty unless $doneone;
stats if $verbose;
