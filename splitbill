#!/usr/bin/perl
use strict;
use warnings;

use constant {
	INFINITY => "inf",
};

sub parse
{
	my @folk;
	while(<>){
		if(!/^([a-z]+) +(-?[0-9]+(\.[0-9]+)?)( (-?[0-9]+(\.[0-9]+)?))?$/){
			die "invalid line, expected <name> <balance> [desired]\n";
		}

		my($name, $balance, $desired) = ($1, $2, $5);
		push @folk, { name => $name, balance => $balance, desired => $desired };
	}
	return @folk;
}

sub balance_total
{
	my $total = 0;
	for(@_){
		$total += $_->{balance};
	}
	return $total;
}

my @folk = parse();
my $total = balance_total(@folk);
my $perperson = -$total / @folk;

sub get_desired
{
	my $p = shift;
	if(defined $p->{desired}){
		return -$p->{desired};
	}
	return -$perperson;
}

sub is_owed
{
	return $_->{balance} < get_desired($_);
}

sub find_max_owed
{
	my $biggest_diff = -(INFINITY);
	my $max = undef;

	for(@_){
		if(!is_owed($_)){
			next;
		}

		my $diff_to_desired = get_desired($_) - $_->{balance};

		if($diff_to_desired > $biggest_diff){
			$biggest_diff = $diff_to_desired;
			$max = $_;
		}
	}

	if(!$max){
		die "no-one owes anyone any money?";
	}

	return $max;
}

sub equal_to_nearest_penny
{
	my($a, $b) = @_;
	return sprintf("%.2f", $a) eq sprintf("%.2f", $b);
}

sub currency_cmp
{
	my($a, $b) = @_;

	if(equal_to_nearest_penny($a, $b)){
		return 0;
	}

	return $a <=> $b;
}

sub at_desired
{
	for(@_){
		if(!equal_to_nearest_penny($_->{balance}, get_desired($_))){
			#print "$_->{name} not at desired: $_->{balance}\n";
			return 0;
		}
	}
	return 1;
}

while(!at_desired(@folk)){
	for(@folk){
		while(currency_cmp($_->{balance}, get_desired($_)) > 0){
			my $to = find_max_owed(@folk);
			my $to_target = get_desired($to);
			my $diff = $to_target - $to->{balance};

			my $min = get_desired($_);
			if($_->{balance} - $diff < $min){
				$diff = $_->{balance} - $min;
			}

			$to->{balance} += $diff;
			$_->{balance} -= $diff;
			print "$_->{name} $diff --> $to->{name}\n";
		}
	}
}

print "\n";
for(@folk){
	print "$_->{name}: balance=$_->{balance} (" . get_desired($_) . " desired)\n";
}
