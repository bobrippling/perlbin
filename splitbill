#!/usr/bin/perl
use strict;
use warnings;

use constant {
	INFINITY => "inf",
};

sub parse
{
	my @folk;
	while(<>){
		if(!/^([a-z]+) +(-?[0-9]+(\.[0-9]+)?)$/){
			die "invalid line, expected <name> <balance>\n";
		}

		my($name, $balance) = ($1, $2);
		push @folk, { name => $name, balance => $balance };
	}
	return @folk;
}

sub balance_total
{
	my $total = 0;
	for(@_){
		$total += $_->{balance};
	}
	return $total;
}

my @folk = parse();
my $total = balance_total(@folk);
my $perperson = -$total / @folk;

sub is_owed
{
	return $_->{balance} < -$perperson;
}

sub find_max_owed
{
	my $lowest_balance = INFINITY;
	my $max = undef;

	for(@_){
		if(is_owed($_) and $_->{balance} < $lowest_balance){
			$lowest_balance = $_->{balance};
			$max = $_;
		}
	}

	return $max;
}

for(@folk){
	while($_->{balance} > -$perperson){
		my $to = find_max_owed(@folk);
		my $diff = -$to->{balance} - $perperson; # pay up to $perperson from $_ to $to

		$to->{balance} += $diff;
		$_->{balance} -= $diff;
		print "$_->{name} $diff --> $to->{name}\n";
	}
}
