#!/usr/bin/perl

sub ctrl_and
{
	return chr(ord(shift()) & 037);
}

my $erase = chr(127);
my $clrtoeol = "\x1b[K";
my $os;

sub stty
{
	my $flag = "-F";
	if($os eq "Darwin"){
		$flag = "-f";
	}
	system("stty $flag /dev/stderr @_");
}

sub iserase
{
	my $ch = shift;
	return $ch eq $erase;
}

sub uniq
{
	my %out;
	$out{$_} = 1 for @_;
	return keys %out;
}

sub simplify
{
	my($str, $type) = $_;
	if($type == 'full'){
		$str =~ s;(.)(?:[^/]+(/)|[^-]+(-));$1$2$3;g;
	}else{
		$str =~ s;(.)(?:[^/]+(/)|[^-]+(-));$1 . substr("$2$3", 0, 3);ge;
	}
	return $str;
}

sub index_i
{
	my($s, $c, $start) = @_;
	return index(lc($s), lc($c), $start);
}

sub ordered
{
	sub chardistances
	{
		my($chars, $verbose) = @_;
		my $anchor = substr($choice, 0, 1);
		my $match = 999999999;
		my $match_v = '';
		my $start = 0;

		return $match unless length($choice);

		while(1){
			$start = index_i($chars, $anchor, $start);
			last if $start == -1;

			if(substr($chars, $start) !~ /$choice_re/i){
				last;
			}

			# got a match, record
			if(length($&) < $match){
				$match = length($&);
				$match_v = $&;
			}
			$start++;
		}

		if($verbose){
			return $match . " ($match_v)";
		}
		return $match;
	}

	my %distances = map { $_ => chardistances($_) } @_;
	return sort {
		my $distcmp = $distances{$a} <=> $distances{$b};
		return $distcmp if $distcmp;
		return length($a) <=> length($b);
	} @_;
}

sub reescape
{
	my $c = shift;
	my $special = ".+*[](){}";
	if(index($special, $c) >= 0){
		return "\\$c";
	}
	return $c;
}

chomp($os = `uname -s`);
$choice = "";
$after = "";
#$cursor_index = 0;
$prompt = "> ";
$prompt_len = length($prompt);
$print_all = 0;

if(@ARGV && ($ARGV[0] eq '--all' or $ARGV[0] eq '-a')){
	shift;
	$print_all = 1;
}

if(@ARGV){
	@choices = @ARGV;
}else{
	print STDERR "$0: loading...\r";
	@choices = map { chomp; $_ } <STDIN>;
	open STDIN, '<&STDERR' or die "couldn't reopen stdin: $!";
	print STDERR "$clrtoeol";
}

$| = 1;
stty("-icanon -echo");
END {
	my $ec = $?;
	stty("icanon echo");
	return $ec;
};

while(1){
	# filter --------------------------------
	($choice_re = $choice) =~ s/./reescape($&) . ".*?"/eg;

	$after = " [<no matches>]";
	eval {
		@relevant = grep /$choice_re/i, @choices;
		1;
	} or do {
		@relevant = ();
		$after = " [<regex error (/$choice_re/)>]";
	};

	my @substrs;
	if(@relevant){
		$columns = $ENV{COLUMNS} - 1;
		if($columns == -1){
			$columns = 80;
		}
		$space = $columns - $prompt_len - length($choice) - 3; # 3 for " []"
		$space_per_choice = ($space - @relevant * 2) / @relevant;

		my $attemptno = 0; # 0 - 2. 0=full strings, 1=medium simplify(), 2=full simplify()
		my @ordered_relevant = ordered(@relevant);

		my $overflow;
		while(1){
			$overflow = 0;
			@substrs = ();

			for(@ordered_relevant){
				my $next;

				if($attemptno == 0){
					$next = $_;
				}elsif($attemptno == 1){
					if(@substrs < 3){
						$next = $_;
					}elsif(@substrs < 6){
						$next = simplify($_, 'medium');
					}else{
						$next = simplify($_, 'full');
					}
				}elsif($attemptno == 2){
					$next = simplify($_, 'medium');
				}elsif($attemptno == 3){
					$next = simplify($_, 'full');
				}

				if(length(join(", ", map({ $_->[0] } @substrs), $next, "...")) >= $space){
					$overflow = 1;
					last;
				}
				push @substrs, [$next, $_];
			}

			if($overflow and $attemptno < 2){
				$attemptno++;
			}else{
				last;
			}
		}

		if($overflow){
			push @substrs, ["...", "..."];
		}

		$after = " [" . join(", ", map({ $_->[0] } @substrs)) . "]";
	}

	# prompt --------------------------------
	print STDERR "\r$prompt$choice$after$clrtoeol";
	print STDERR "\x1b[D" x length($after) ; # - (length($choice) - $cursor_index));

	if(read(STDIN, $ch, 1) != 1){
		exit(1);
	}

	if(iserase($ch)){
		$choice =~ s/.$//;
		#$cursor_index--;

	}elsif(ord($ch) == 10){
		print STDERR "\r$clrtoeol";

		if($print_all && @relevant){
			for(@relevant){
				print "$_\n";
			}
			last;
		}elsif(@substrs){
			print "$substrs[0]->[1]\n";
			last;
		}else{
			print STDERR "no matches\n";
		}

	}elsif($ch eq ctrl_and('w')){
		$choice =~ s/\b[a-zA-Z0-9]+$//;
		#$cursor_index -= length($&);

	}elsif($ch eq ctrl_and('u')){
		$choice = "";
		#$cursor_index = 0;

	#}elsif($ch eq ctrl_and('f')){
	#    if($cursor_index < length($choice)){
	#        $cursor_index++;
	#    }

	#}elsif($ch eq ctrl_and('b')){
	#    if($cursor_index > 0){
	#        $cursor_index--;
	#    }

	}elsif($ch eq ctrl_and('i')){ # tab
		print STDERR "\n";
		for(@relevant){
			print STDERR "$_\n";
		}

	}else{
		$choice .= $ch;
		#$cursor_index++;
	}
}
