#!/usr/bin/perl

use warnings;

our %code = (
	'.-'   => 'a',
	'-...' => 'b',
	'-.-.' => 'c',
	'-..'  => 'd',
	'.'    => 'e',
	'..-.' => 'f',
	'--.'  => 'g',
	'....' => 'h',
	'..'   => 'i',
	'.---' => 'j',
	'-.-'  => 'k',
	'.-..' => 'l',
	'--'   => 'm',
	'-.'   => 'n',
	'---'  => 'o',
	'.--.' => 'p',
	'--.-' => 'q',
	'.-.'  => 'r',
	'...'  => 's',
	'-'    => 't',
	'..-'  => 'u',
	'...-' => 'v',
	'.--'  => 'w',
	'-..-' => 'x',
	'-.--' => 'y',
	'--..' => 'z',
);


sub decode($)
{
	my $_ = $_[0];
	my $ret = '';

	s|[^ ./-]||g;
	if(/\//){
		while(s|^([^/]*)/||){
			# $1 = [\.- ]*
			my $word = $1;

			while($word =~ s| *([^ ]*) ||){
				# $1 = letter = [\.-]
				if(!$code{$1}){
					warn "Unknown code \"$1\"\n";
				}else{
					$ret .= $code{$1};
				}
			}

			$ret .= ' ';
		}
	}else{
		my $len = 1;
		warn "ambigous input!\n";
		s| ||g;
		do{
			my $current = substr $_, 0, $len++;
			#print "looking for '$current'";
			if($code{$current}){
				#print "found '$current': $code{$current}";
				$_ = substr $_, $len;
				$len = 1;
				$ret .= $code{$current};
			}
		}while(length && $len < length);
	}

	print STDERR "left over: $_" if length;

	return $ret;
}

$\ = "\n";
print decode $_ while <>;
